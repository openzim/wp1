# This file is provided for the dev docker compose environment. Specifically, it is
# for the dev rq workers, which run within the docker-compose environment and must
# connect to redis and mysql using special paths.

# To get end-to-end testing in the dev enviroment to work YOU MUST EDIT THIS FILE in
# the places indicated, then copy it to wp1/wp1/credentials.py.dev. Specifically, edit
# the objects for the key 'STORAGE'.

from wp1.environment import Environment

ENV = Environment.DEVELOPMENT

CONF_LANG = 'en'

CREDENTIALS = {
    Environment.DEVELOPMENT: {

        # This is your connection to the Wikipedia replica database, through toolforge.
        # If you have a toolforge account, you can add your credentials here, after
        # setting up a local tunnel. This is generally NOT NECESSARY because the
        # crawling workers are not currently set up in the dev environment. See:
        # https://wikitech.wikimedia.org/wiki/Help:Toolforge/Database#SSH_tunneling_for_local_testing_which_makes_use_of_Wiki_Replica_databases
        'WIKIDB': {
            'user': 'yourtoolforgeuser', # EDIT this line
            'password': 'yourtoolforgepass', # EDIT this line
            'host': 'localhost',
            'port': 4711,
            'db': 'enwiki_p',
        },

        # The credentials for the local WP1 database. This is prepopulated to work in the
        # docker-compose environment with the dev database that the dev environment already
        # uses (the same db that the dev frontend connects to in your credentials.py). This
        # should not have to be edited.
        'WP10DB': {
            'user': 'root',
            'password': 'wikipedia',
            'host': 'dev-database',
            'port': 3306,
            'db': 'enwp10_dev',
        },

        # The connection string for Redis in the docker-compose environment. This is also
        # prepopulated to use the dev Redis, and should not have to be edited.
        'REDIS': {
            'host': 'redis',
            'port': 6379,
        },

        # These don't exist in development.
        'API': {},

        # Credentials for authentication through mwoauth.
        'MWOAUTH': {
            'consumer_key': '',
            'consumer_secret': '',
        },

        # This is meaningless in the docker-compose environment and should not have to be
        # edited.
        'SESSION': {
            'secret_key': 'WP1_secret_key'
        },

        # Client side url used for redirection in login process. Also meaningless in the
        # docker-compose environment and should not have to be edited.
        'CLIENT_URL': {
            'domains': ['http://localhost:5173'],
            'homepage': 'http://localhost:5173/#/',
            'api': 'http://localhost:5000',
        },

        # Configuration for the storage backend for storing selection lists.
        # For development, you can use the local MinIO instance that's included in 
        # the docker-compose setup (settings below are pre-configured for this).
        # If you need to use an external service instead, you have two options:
        # 1. Use the Kiwix S3 backend on Wasabi. You will need to request dev or prod
        #    credentials. See https://github.com/openzim/zimfarm/wiki/S3-Cache-Policy
        #    for how.
        # 2. Use another S3-compatible storage service (AWS S3 or similar).
        # In either external case, you'll need to edit the settings below.
        'STORAGE': {
            'url': 'http://minio:9000/',
            'key': 'minio_key', #username
            'secret': 'minio_secret', #password
            'bucket': 'org-kiwix-dev-wp1',
        },

        # Server URL and credentials for the Zim Farm that will be used to create
        # ZIM files from materialized selections.
        'ZIMFARM': {
            # Use 'host.docker.internal' to connect to zimfarm from within the docker container.
            # This works on Mac/Windows. On Linux, try '172.17.0.1' instead.
            'url': 'http://host.docker.internal:8000/v1',
            's3_url': 'http://host.docker.internal:9000/', # if using minio
            'user': 'admin',
            'password': 'admin',
            # A simple token secret exchanged between the WP1 server and the zimfarm
            # server, to ensure requests to the webhook endpoint are valid.
            'hook_token': '',
            'cache_url': 'http://host.docker.internal:9000/',  # if using minio
            'image': 'ghcr.io/openzim/mwoffliner:1.15.0',
        },

        # Logging directives. Keys are the names of the loggers, values are dictionaries
        # with the logging configuration. The special key '*' is used to set the
        # default logging configuration. Logging is always done to stdout, and is redirected
        # and rotated by the supervisor process.
        'LOGGING': {},
    },

    Environment.PRODUCTION: {}
}
