# Copy this file to credentials.py (in the same directory). Your application
# database should work immediately after you run:
# $ docker-compose -f docker-compose-dev.yml -d
# in the root directory. The Wiki replica database requires actual toolforge
# credentials to be accessible. The test database will be available when you run:
# $ docker-compose -f docker-compose-test.yml -d
# in the root directory.
import sys

from wp1.environment import Environment

# The environment that the app is running in. Each environment corresponds to a key in
# the CREDENTIALS dictionary. When the app is run, it looks for the credentials for the
# environment specified in this line. For development, this should remain
# Environment.DEVELOPMENT. For production, it should be set to Environment.PRODUCTION.
# Uncomment the following line in production systems.
# ENV = Environment.Production

# yapf: disable
# Comment the following line in production systems.
ENV = Environment.TEST if 'pytest' in sys.modules else Environment.DEVELOPMENT
# yapf: enable

# The directory under conf/ to look for the conf.json file in. So if this is
# 'foo', the file will be loaded as conf/foo/conf.json. It is okay to check in
# conf.json files, they don't contain any sensitive information.
CONF_LANG = 'en'

CREDENTIALS = {
    Environment.DEVELOPMENT: {
        # Database credentials for the wikipedia replica database.
        # For development, you can use your toolforge credentials and connect
        # to a live replica via an SSH tunnel, as outlined here:
        # https://wikitech.wikimedia.org/wiki/Help:Toolforge/Database#Connecting_to_the_database_replicas_from_your_own_computer
        # The 'local port' you use, 4711 in the example, will correspond to the
        # port you set below.
        'WIKIDB': {
            'user': 'yourtoolforgeuser', # EDIT this line
            'password': 'yourtoolforgepass', # EDIT this line
            'host': 'localhost',
            'port': 4711,
            'db': 'enwiki_p',
        },

        # Database credentials for the enwp10 project/application database.
        # For development, use the docker-compose-dev.yml file and spin up a
        # local database that has some (potentially out of date) data in it.
        'WP10DB': {
            'user': 'root',
            'password': 'wikipedia',
            'host': 'localhost',
            'port': 6300,
            'db': 'enwp10_dev',
        },

        # Credentials for connecting to Redis. In deveoplment, this is also
        # run as a docker-compose service.
        'REDIS': {
            'host': 'localhost',
            'port': 9736,
        },

        # Credentials for connecting to Wikipedia. These are used by the bot
        # backend to log in to English Wikipedia and edit articles. Not
        # necessary in development (because there's no wiki to edit).
        'API': {},

        # Options for the "Development overlay" which mocks queue functionality
        # in the development environment.
        'OVERLAY': {
            'update_wait_time_seconds': 40,
            'job_elapsed_time_seconds': 10,
            'basic_income_total_time_seconds': 60,
        },

        # Credentials for authentication to Wikimedia through mwoauth. These are
        # used by the frontend/backend in order to enable the "Login"
        # functionality on the web app. For development, you should register your
        # own app with the callback `http://localhost:5000/v1/oauth/complete`. To
        # register the app go to
        # <https://meta.wikimedia.org/wiki/Special:OAuthConsumerRegistration/propose>
        'MWOAUTH': {
            'consumer_key': '',
            'consumer_secret': '',
        },

        # Secret key for session. If this ever changes, all existing logged in users will be
        # logged out.
        # To get your random secret key for production use the following script:
        # python3
        # import os
        # os.urandom(24).hex()
        'SESSION': {
            'secret_key': 'WP1_secret_key'
        },

        # Client side url used for redirection in login process.
        'CLIENT_URL': {
            'domains': ['http://localhost:5173'],
            'homepage': 'http://localhost:5173/#/',
            's3': 'https://org-kiwix-dev-wp1.s3.us-west-1.wasabisys.com',
            'api': 'http://localhost:5000',
        },

        # Configuration for the storage backend for storing selection lists.
        # See https://github.com/openzim/zimfarm/wiki/S3-Cache-Policy for how to
        # get these credentials.
        'STORAGE': {
            'key': '', # EDIT this line
            'secret': '', # EDIT this line
            'bucket': 'org-kiwix-dev-wp1',
        },

        # Server URL and credentials for the Zim Farm that will be used to create
        # ZIM files from materialized selections.
        'ZIMFARM': {
            'url': 'https://api.farm.youzim.it/v1',
            's3_url': 'https://s3.us-west-1.wasabisys.com/org-kiwix-zimit',
            'user': '', # EDIT this line
            'password': '', # EDIT this line
            # A simple token secret exchanged between the WP1 server and the zimfarm
            # server, to ensure requests to the webhook endpoint are valid.
            'hook_token': '', # EDIT this line
        },
    },

    # Environment for python nosetests. In this environment, only the MySQL database
    # connections for the WP10 and WIKI dbs and the Redis service are configured. No
    # other services are available.
    #
    # This section should work as is, alongside the test database in docker-compose-test.yml
    # Run that file ($ docker-compose -f docker-compose-test.yml up -d) before running tests.
    Environment.TEST: {
        # Use the test MySQL database in the docker-compose-test.yml graph
        # for both the Wikipedia replica database and the application (wp10)
        # database. These are empty databases that will be created and emptied
        # before and after each test.
        'WIKIDB': {
            'user': 'root',
            'host': 'localhost',
            'port': 6600,
            'db': 'enwikip_test',
        },
        'WP10DB': {
            'user': 'root',
            'host': 'localhost',
            'port': 6600,
            'db': 'enwp10_test',
        },

        'CLIENT_URL': {
            'api': 'http://test.server.fake'
        },

        # Redis exists in the docker-compose-test.yml graph on port 9777.
        'REDIS': {
            'host': 'localhost',
            'port': 9777,
        },

        # This will not work, but some tests depend on there being values here.
        'STORAGE': {
            'key': 'test_key',
            'secret': 'test_secret',
            'bucket': 'org-kiwix-dev-wp1',
        },

        # Fake Zim Farm server values for test.
        'ZIMFARM': {
            'url': 'https://fake.farm/v1',
            's3_url': 'https://fake.wasabisys.com/org-kiwix-zimit',
            'user': 'farmuser',
            'password': 'farmpass',
            'hook_token': 'hook-token-abc',
        }
    },

    # EDIT: Remove the next line after you've provided actual production credentials.
    Environment.PRODUCTION: {}

    # Example production config. Edit the indicated lines to provide credentials.
    # When you're done, remove the empty Environment.PRODUCTION key above.
    # Environment.PRODUCTION: {
    #   # Database credentials for the wikipedia replica database.
    #   'WIKIDB': {
    #     'user': 'someuser', # EDIT this line for production.
    #     'password': 'somepass', # EDIT this line for production.
    #     'host': 'enwiki.analytics.db.svc.eqiad.wmflabs',
    #     'db': 'enwiki_p',
    #   },

    #   # Database credentials for the enwp10 project/application database.
    #   'WP10DB': {
    #     'user': 'someuser', # EDIT this line for production.
    #     'password': 'somepass', # EDIT this line for production.
    #     'host': 'tools.db.svc.eqiad.wmflabs',
    #     'db': 's51114__enwp10',
    #   },

    #   # Credentials for connecting to Redis. In production, this is part of
    #   # the production docker-compose and has hostname 'redis'.
    #   'REDIS': {
    #       'host': 'redis',
    #   }

    #   # WMF wiki oauth credentials. Used to edit English Wikipedia.
    #   'API': {
    #     'user': 'WP 1.0 bot@WP_1.0_bot',
    #     'pass': 'somepass', # EDIT this line for production.
    #   }
    # }

    #   # Credentials for authentication through mwoauth.
    #   # To register the app go to 'https://meta.wikimedia.org/wiki/Special:OAuthConsumerRegistration/propose'
    #   'MWOAUTH': {
    #      'consumer_key': '', # EDIT this line for production.
    #      'consumer_secret': '', # EDIT this line for production.
    #   },

    #   # Secret key for session. If this ever changes, all existing logged in users will be
    #   # logged out.
    #   # To get your random secret key for production use the following script:
    #   # python3
    #   # import os
    #   # os.urandom(24).hex()
    #   'SESSION': {
    #      'secret_key': '' # EDIT this line for production.
    #   },

    #   # Client side url used for redirection in login process.
    #   'CLIENT_URL': {
    #      'domains': ['http://wp1.openzim.org', 'https://wp1.openzim.org'],
    #      'homepage': 'https://wp1.openzim.org/#/',
    #      's3': 'https://org-kiwix-wp1.s3.us-west-1.wasabisys.com',
    #      'api': 'https://api.wp1.openzim.org',
    #   },

    #   # Configuration for the storage backend for storing selection lists.
    #   'STORAGE': {
    #      'key': '', # EDIT this line for production.
    #      'secret': '', # EDIT this line for production.
    #      'bucket': 'org-kiwix-wp1',
    #   },

    #   # Server URL and credentials for the Zim Farm that will be used to create
    #   # ZIM files from materializes selections.
    #   'ZIMFARM': {
    #      'url': 'https://api.farm.youzim.it/v1',
    #      's3_url': 'https://fake.wasabisys.com/org-kiwix-zimit',
    #      'user': '', # EDIT this line
    #      'password': '', # EDIT this line
    #       # A simple token secret exchanged between the WP1 server and the zimfarm
    #       # server, to ensure requests to the webhook endpoint are valid.
    #       'hook_token': '', # EDIT this line
    #   },
}
